apply plugin: 'com.android.application'

def listSubFile = {
    def resFolder = 'src/main/res/layouts'
    def files = file(resFolder).listFiles()
    def folders = []
    files.each {
        item -> folders.add(item.absolutePath)
    }
    folders.add(file(resFolder).parentFile.absolutePath)
    return folders
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId "com.bsty.baseapp"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode 1
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        //Room
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }

        //NDK
        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi-v7a"
//            abiFilters "x86"
//            abiFilters "armeabi"
//            abiFilters "arm64-v8a"
//            abiFilters "x86_64"
//            abiFilters "mips"
//            abiFilters "mips64"
        }
        vectorDrawables.useSupportLibrary = true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = [
                    'libs',
            ]
            res.srcDirs = listSubFile()
        }
    }

    signingConfigs {
        debug {
        }
        myConfig {
            storeFile file("../keystore") //签名证书文件
            storePassword "zhaolu123"         //签名证书密码
            keyAlias 'bsty'                 //别名
            keyPassword "zhaolu123"           //别名密码
        }
    }


    buildTypes {
        release {
            signingConfig signingConfigs.myConfig
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':framework')
    implementation project(path: ':data')

    implementation rootProject.ext.dependencies["androidx-appcompat"]
    implementation rootProject.ext.dependencies["recyclerview"]
    implementation rootProject.ext.dependencies["cardView"]
    implementation rootProject.ext.dependencies["material"]
    implementation rootProject.ext.dependencies["vectordrawable"]
    implementation rootProject.ext.dependencies["vectordrawable-anim"]
    implementation rootProject.ext.dependencies["constraintLayout"]
    implementation rootProject.ext.dependencies["rxFastAndroidNetwork"]
    implementation rootProject.ext.dependencies["room"]
    annotationProcessor rootProject.ext.dependencies["room-compiler"]
    implementation rootProject.ext.dependencies["calligraphy"]
    implementation rootProject.ext.dependencies["viewpump"]
    implementation rootProject.ext.dependencies["glide"]
    implementation rootProject.ext.dependencies["gson"]
    debugImplementation rootProject.ext.dependencies["debugDB"]
    implementation rootProject.ext.dependencies["dagger"]
    implementation rootProject.ext.dependencies["dagger-android-support"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    annotationProcessor rootProject.ext.dependencies["dagger-android-processor"]
    implementation rootProject.ext.dependencies["rxjava"]
    implementation rootProject.ext.dependencies["rxandroid"]
    implementation rootProject.ext.dependencies["swipeview"]
//    implementation rootProject.ext.dependencies["timber"]
    implementation rootProject.ext.dependencies["logger"]
    testImplementation rootProject.ext.dependencies["junit"]
    testImplementation rootProject.ext.dependencies["mockito"]
    testAnnotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    androidTestImplementation rootProject.ext.dependencies["espresso-intents"]
    androidTestImplementation rootProject.ext.dependencies["mockito"]
    androidTestAnnotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    implementation rootProject.ext.dependencies["lifecycle-extensions"]
    annotationProcessor rootProject.ext.dependencies["lifecycle-compiler"]
}
